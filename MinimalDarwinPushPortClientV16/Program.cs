using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Apache.NMS;
using Apache.NMS.ActiveMQ;
using OpenRailMessaging;
using RttiPPT;

namespace MinimalDarwinPushPortClientV16
{
    /*
     * This sample illustrates how to use .Net generally and C# specifically to 
     * receive and process messages from the Darwin Push Port.  Originally written by Chris Bailiss.
     * The message schemas are included in the project for information only.
     * The classes in the rttiPPT.cs file were autogenerated from these schemas.
     * This sample makes use of the Apache NMS Messaging API - http://activemq.apache.org/nms/
     * This sample was built against v1.7.0 of the API.  
     * The Apache.NMS and Apache.NMS.ActiveMQ assemblies can be downloaded from http://activemq.apache.org/nms/download.html
     */

    class Program
    {
        private static int miMessageCount = 0;

        static void Main(string[] args)
        {
            try
            {
                // CONNECTION SETTINGS:  In your code, move these into some form of configuration file / table
                // *** change the lines below to match your personal details *** 
                string sConnectUrl = "activemq:tcp://InsertYourHostHere:61616?connection.watchTopicAdvisories=false";
                string sUser = "InsertYourUserNameHere";
                string sPassword = "InsertYourPasswordHere";
                string sTopic = "darwin.pushport-v16";

                if ((sUser == "InsertYourUserNameHere") || (sPassword == "InsertYourPasswordHere") || (sConnectUrl.Contains("InsertYourHostHere")))
                {
                    Console.WriteLine("DARWIN PUSH PORT RECEIVER SAMPLE: ");
                    Console.WriteLine();
                    Console.WriteLine("ERROR:  Please update the source code (in the Program.cs file) to use your user name and password!");
                    Console.ReadLine();
                    return;
                }

                Console.WriteLine("Darwin v16 Minimal Example");
                Console.WriteLine("Starting...");

                IConnectionFactory oConnectionFactory = new NMSConnectionFactory(new Uri(sConnectUrl));
                IConnection oConnection = oConnectionFactory.CreateConnection(sUser, sPassword);
                oConnection.ClientId = sUser;
                oConnection.ExceptionListener += new ExceptionListener(OnConnectionException);
                ISession oSession = oConnection.CreateSession();
                ITopic oTopic = oSession.GetTopic(sTopic);
                IMessageConsumer oConsumer = oSession.CreateConsumer(oTopic);

                oConsumer.Listener += new MessageListener(OnMessageReceived);

                oConnection.Start();

                DateTime dtRunUntil = DateTime.Now.AddSeconds(30);
                while (DateTime.Now < dtRunUntil)
                {
                    Thread.Sleep(50);
                }

                oConnection.Stop();

                DateTime dtWaitUntil = DateTime.Now.AddSeconds(2);
                while (DateTime.Now < dtWaitUntil)
                {
                    Thread.Sleep(50);
                }

                Console.WriteLine("Press any key to finish");
                Console.ReadKey();

            }
            catch (Exception oException)
            {
                Console.WriteLine("FATAL ERROR:  " + oException.GetType().FullName);
                Console.WriteLine(oException.Message);
            }
        }

        private static void OnConnectionException(Exception oException)
        {
            Console.WriteLine("CONNECTION ERROR:  " + oException.GetType().FullName);
            Console.WriteLine(oException.Message);
        }

        private static void OnMessageReceived(IMessage message)
        {
            try
            {
                OpenRailBytesMessage oMessage = null;
                IBytesMessage msgBytes = message as IBytesMessage;
                if (msgBytes != null) oMessage = new OpenRailBytesMessage(message.NMSTimestamp, msgBytes.Content);

                if (oMessage != null)
                {
                    miMessageCount++;
                    if ((miMessageCount % 25) == 0)
                    {
                        Pport oPPort = DarwinMessageHelper.GetMessageAsObjects(oMessage.Bytes);
                        string sMessageType = DarwinMessageHelper.GetMessageDescription(oPPort);
                        Console.WriteLine(DateTime.Now.ToString("HH:mm:ss.fff") + ": Total Messages Received = " + miMessageCount.ToString() + ": Last Message = " + sMessageType);
                    }
                }
            }
            catch (Exception oException)
            {
                Console.WriteLine("MESSAGE ERROR:  " + oException.GetType().FullName);
                Console.WriteLine(oException.Message);
            }
        }
    }
}
